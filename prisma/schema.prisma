generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model AccessTokens {
  id          Int      @id @default(autoincrement())
  accessToken String   @db.VarChar(100)
  userId      String?  @map("user_id")
  driverId    String?
  driver      Drivers?   @relation(fields: [driverId], references: [id])
  user        Users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("access_tokens")
}
 
model BillingAddresses {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  streetAddress String    @map("street_address")
  city          String?   @db.VarChar(100)
  state         String?   @db.VarChar(100)
  postalCode    String?   @map("postal_code")
  country       String?   @db.VarChar(100)
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @map("updated_at")
  userId        String?   @map("user_id")
  aptNmbr       String?   @map("apt_nmbr")
  lat           Float?
  long          Float?
  users         Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("billing_addresses")
}

model Categories {
  id       Int        @id @default(autoincrement())
  title    String     @db.VarChar(255)
  products Products[]

  @@map("categories")
}

// Define a model for car makes
model CarMakes {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  models CarModels[]

  @@map("car_makes")
}

// Define a model for car models
model CarModels {
  id     Int      @id @default(autoincrement())
  makeId Int
  name   String   @unique
  year   Int
  cars   Cars[]
  make   CarMakes @relation(fields: [makeId], references: [id])

  @@map("car_models")
}

// Define a model for car colors
model CarColors {
  id   Int    @id @default(autoincrement())
  name String @unique
  cars Cars[]

  @@map("car_colors")
}

// Define a model for cars that belong to drivers
model Cars {
  id           Int       @id @default(autoincrement())
  modelId      Int
  colorId      Int
  licensePlate String    @unique
  model        CarModels @relation(fields: [modelId], references: [id])
  color        CarColors @relation(fields: [colorId], references: [id])
  driver       Drivers?  @relation(fields: [driverId], references: [id])
  driverId     String?

  @@map("cars")
}

model Drivers {
  id           String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  email        String?        @unique @db.VarChar(255)
  countryCode  Int?
  phoneNumber  String?        @db.VarChar(15)
  dateOfBirth  DateTime?      @db.Date
  hireDate     DateTime       @default(now())
  address      String?        @db.VarChar(255)
  city         String?        @db.VarChar(255)
  state        String?        @db.VarChar(255)
  postalCode   String?        @db.VarChar(10)
  country      String?        @db.VarChar(255)
  cars         Cars[]
  orders       Orders[]
  accessTokens AccessTokens[]

  @@map("drivers")
}

model OrderItems {
  id        Int       @id @default(autoincrement())
  qty       Int?
  productId Int?      @map("product_id")
  orderId   Int?      @map("order_id")
  orders    Orders?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products  Products? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

model Orders {
  id                Int                @id @default(autoincrement())
  userId            String?            @map("user_id")
  driverId          String?            @map("driver_id")
  orderStatus       Int?               @map("order_status")
  deliveryAddressId String?            @map("delivery_address_id") @db.Uuid
  billingAddressId  String?            @map("billing_address_id") @db.Uuid
  pickupAddressId   Int?               @map("pickup_address_id")
  createdAt         DateTime?          @default(now()) @map("created_at")
  deliveredAt       DateTime?          @map("delivered_at")
  orderTotal        Float?             @map("order_total")
  orderItems        OrderItems[]
  drivers           Drivers?           @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             Users?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shippingAddresses ShippingAddresses? @relation(fields: [deliveryAddressId], references: [id])
  stores            Stores?            @relation(fields: [pickupAddressId], references: [id])

  @@map("orders")
}

model Payments {
  id               String    @id @db.Uuid
  plaidAccessToken String?   @map("plaid_access_token") @db.VarChar
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @default(now()) @map("updated_at")
  userId           String?   @map("user_id") 
  users            Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("payments")
}

model Products {
  id              Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String?
  dosage          String?      @db.VarChar(100)
  categoryId      Int?         @map("category_id")
  effects         String?
  qty             Int?
  price           Float?
  storeId         Int?         @map("store_id")
  image           String?      @db.VarChar(10000)
  stripeProductId String?      @map("stripe_product_id") @db.VarChar(10000)
  stripePriceId   String?      @map("stripe_price_id") @db.VarChar(10000)
  orderItems      OrderItems[]
  categories      Categories?  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stores          Stores?      @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("products")
}

model ShippingAddresses {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  streetAddress String    @map("street_address")
  city          String?   @db.VarChar(100)
  state         String?   @db.VarChar(100)
  postalCode    String?   @map("postal_code")
  country       String?   @db.VarChar(100)
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @map("updated_at")
  userId        String?   @map("user_id") 
  aptNmbr       String?   @map("apt_nmbr")
  lat           Float?
  long          Float?
  users         Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Orders        Orders[]

  @@map("shipping_addresses")
}

model Stores {
  id            Int        @id @default(autoincrement())
  name          String?    @db.VarChar(255)
  streetAddress String     @map("street_address")
  city          String?    @db.VarChar(255)
  state         String?    @db.VarChar(255)
  country       String?    @db.VarChar(255)
  zip           String?    @db.VarChar
  vendorId      String?    @map("vendor_id")
  lat           Float?
  long          Float?
  products      Products[]
  Orders        Orders[]
  vendor        Vendors?   @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("stores")
}

model Users {
  id                String              @unique @db.VarChar(255)
  email             String              @unique(map: "unique_email") @db.VarChar(255)
  dateOfBirth       DateTime?           @map("date_of_birth") @db.Date
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @default(now()) @map("updated_at") @db.Timestamp(6)
  firstName         String?             @map("first_name") @db.VarChar
  lastName          String?             @map("last_name") @db.VarChar
  countryCode       Int?                @map("country_code")
  phoneNumber       Int?                @map("phone_number")
  billingAddresses  BillingAddresses[]
  orders            Orders[]
  payments          Payments[]
  shippingAddresses ShippingAddresses[]
  accessTokens      AccessTokens[]

  @@map("users")
}

model Vendors {
  id          String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  email       String?   @unique @db.VarChar(255)
  countryCode Int?
  phoneNumber String?   @db.VarChar(15)
  dateOfBirth DateTime? @db.Date
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(255)
  state       String?   @db.VarChar(255)
  postalCode  String?   @db.VarChar(10)
  country     String?   @db.VarChar(255)
  stores      Stores[]
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("vendors")
}
